# pages/country_profile.py
import dash
from dash import html, dcc, callback, Input, Output
import dash_bootstrap_components as dbc
import plotly.express as px
import plotly.graph_objects as go
from dash.exceptions import PreventUpdate
# Updated import to use helpers from data_loader
from data_loader import df, NOC_OPTIONS_NO_ALL, get_default_value

dash.register_page(__name__, name='Country Profile')

# Country code to name and flag mapping
COUNTRY_MAPPING = {
    'AFG': ('Afghanistan', 'ğŸ‡¦ğŸ‡«'),
    'ALB': ('Albania', 'ğŸ‡¦ğŸ‡±'),
    'ALG': ('Algeria', 'ğŸ‡©ğŸ‡¿'),
    'AND': ('Andorra', 'ğŸ‡¦ğŸ‡©'),
    'ANG': ('Angola', 'ğŸ‡¦ğŸ‡´'),
    'ANT': ('Antigua and Barbuda', 'ğŸ‡¦ğŸ‡¬'),
    'ARG': ('Argentina', 'ğŸ‡¦ğŸ‡·'),
    'ARM': ('Armenia', 'ğŸ‡¦ğŸ‡²'),
    'ARU': ('Aruba', 'ğŸ‡¦ğŸ‡¼'),
    'ASA': ('American Samoa', 'ğŸ‡¦ğŸ‡¸'),
    'AUS': ('Australia', 'ğŸ‡¦ğŸ‡º'),
    'AUT': ('Austria', 'ğŸ‡¦ğŸ‡¹'),
    'AZE': ('Azerbaijan', 'ğŸ‡¦ğŸ‡¿'),
    'BAH': ('Bahamas', 'ğŸ‡§ğŸ‡¸'),
    'BAN': ('Bangladesh', 'ğŸ‡§ğŸ‡©'),
    'BAR': ('Barbados', 'ğŸ‡§ğŸ‡§'),
    'BDI': ('Burundi', 'ğŸ‡§ğŸ‡®'),
    'BEL': ('Belgium', 'ğŸ‡§ğŸ‡ª'),
    'BEN': ('Benin', 'ğŸ‡§ğŸ‡¯'),
    'BER': ('Bermuda', 'ğŸ‡§ğŸ‡²'),
    'BHU': ('Bhutan', 'ğŸ‡§ğŸ‡¹'),
    'BIH': ('Bosnia and Herzegovina', 'ğŸ‡§ğŸ‡¦'),
    'BIZ': ('Belize', 'ğŸ‡§ğŸ‡¿'),
    'BLR': ('Belarus', 'ğŸ‡§ğŸ‡¾'),
    'BOL': ('Bolivia', 'ğŸ‡§ğŸ‡´'),
    'BOT': ('Botswana', 'ğŸ‡§ğŸ‡¼'),
    'BRA': ('Brazil', 'ğŸ‡§ğŸ‡·'),
    'BRN': ('Brunei', 'ğŸ‡§ğŸ‡³'),
    'BRU': ('Brunei', 'ğŸ‡§ğŸ‡³'),
    'BUL': ('Bulgaria', 'ğŸ‡§ğŸ‡¬'),
    'BUR': ('Burkina Faso', 'ğŸ‡§ğŸ‡«'),
    'CAF': ('Central African Republic', 'ğŸ‡¨ğŸ‡«'),
    'CAM': ('Cambodia', 'ğŸ‡°ğŸ‡­'),
    'CAN': ('Canada', 'ğŸ‡¨ğŸ‡¦'),
    'CAY': ('Cayman Islands', 'ğŸ‡°ğŸ‡¾'),
    'CGO': ('Congo', 'ğŸ‡¨ğŸ‡¬'),
    'CHA': ('Chad', 'ğŸ‡¹ğŸ‡©'),
    'CHI': ('Chile', 'ğŸ‡¨ğŸ‡±'),
    'CHN': ('China', 'ğŸ‡¨ğŸ‡³'),
    'CIV': ('Ivory Coast', 'ğŸ‡¨ğŸ‡®'),
    'CMR': ('Cameroon', 'ğŸ‡¨ğŸ‡²'),
    'COD': ('DR Congo', 'ğŸ‡¨ğŸ‡©'),
    'COK': ('Cook Islands', 'ğŸ‡¨ğŸ‡°'),
    'COL': ('Colombia', 'ğŸ‡¨ğŸ‡´'),
    'COM': ('Comoros', 'ğŸ‡°ğŸ‡²'),
    'CPV': ('Cape Verde', 'ğŸ‡¨ğŸ‡»'),
    'CRC': ('Costa Rica', 'ğŸ‡¨ğŸ‡·'),
    'CRO': ('Croatia', 'ğŸ‡­ğŸ‡·'),
    'CUB': ('Cuba', 'ğŸ‡¨ğŸ‡º'),
    'CYP': ('Cyprus', 'ğŸ‡¨ğŸ‡¾'),
    'CZE': ('Czech Republic', 'ğŸ‡¨ğŸ‡¿'),
    'DEN': ('Denmark', 'ğŸ‡©ğŸ‡°'),
    'DJI': ('Djibouti', 'ğŸ‡©ğŸ‡¯'),
    'DMA': ('Dominica', 'ğŸ‡©ğŸ‡²'),
    'DOM': ('Dominican Republic', 'ğŸ‡©ğŸ‡´'),
    'ECU': ('Ecuador', 'ğŸ‡ªğŸ‡¨'),
    'EGY': ('Egypt', 'ğŸ‡ªğŸ‡¬'),
    'ERI': ('Eritrea', 'ğŸ‡ªğŸ‡·'),
    'ESA': ('El Salvador', 'ğŸ‡¸ğŸ‡»'),
    'ESP': ('Spain', 'ğŸ‡ªğŸ‡¸'),
    'EST': ('Estonia', 'ğŸ‡ªğŸ‡ª'),
    'ETH': ('Ethiopia', 'ğŸ‡ªğŸ‡¹'),
    'FIJ': ('Fiji', 'ğŸ‡«ğŸ‡¯'),
    'FIN': ('Finland', 'ğŸ‡«ğŸ‡®'),
    'FRA': ('France', 'ğŸ‡«ğŸ‡·'),
    'FSM': ('Micronesia', 'ğŸ‡«ğŸ‡²'),
    'GAB': ('Gabon', 'ğŸ‡¬ğŸ‡¦'),
    'GAM': ('Gambia', 'ğŸ‡¬ğŸ‡²'),
    'GBR': ('Great Britain', 'ğŸ‡¬ğŸ‡§'),
    'GBS': ('Guinea-Bissau', 'ğŸ‡¬ğŸ‡¼'),
    'GEO': ('Georgia', 'ğŸ‡¬ğŸ‡ª'),
    'GEQ': ('Equatorial Guinea', 'ğŸ‡¬ğŸ‡¶'),
    'GER': ('Germany', 'ğŸ‡©ğŸ‡ª'),
    'GHA': ('Ghana', 'ğŸ‡¬ğŸ‡­'),
    'GRE': ('Greece', 'ğŸ‡¬ğŸ‡·'),
    'GRN': ('Grenada', 'ğŸ‡¬ğŸ‡©'),
    'GUA': ('Guatemala', 'ğŸ‡¬ğŸ‡¹'),
    'GUI': ('Guinea', 'ğŸ‡¬ğŸ‡³'),
    'GUM': ('Guam', 'ğŸ‡¬ğŸ‡º'),
    'GUY': ('Guyana', 'ğŸ‡¬ğŸ‡¾'),
    'HAI': ('Haiti', 'ğŸ‡­ğŸ‡¹'),
    'HKG': ('Hong Kong', 'ğŸ‡­ğŸ‡°'),
    'HON': ('Honduras', 'ğŸ‡­ğŸ‡³'),
    'HUN': ('Hungary', 'ğŸ‡­ğŸ‡º'),
    'INA': ('Indonesia', 'ğŸ‡®ğŸ‡©'),
    'IND': ('India', 'ğŸ‡®ğŸ‡³'),
    'IRI': ('Iran', 'ğŸ‡®ğŸ‡·'),
    'IRL': ('Ireland', 'ğŸ‡®ğŸ‡ª'),
    'IRQ': ('Iraq', 'ğŸ‡®ğŸ‡¶'),
    'ISL': ('Iceland', 'ğŸ‡®ğŸ‡¸'),
    'ISR': ('Israel', 'ğŸ‡®ğŸ‡±'),
    'ISV': ('US Virgin Islands', 'ğŸ‡»ğŸ‡®'),
    'ITA': ('Italy', 'ğŸ‡®ğŸ‡¹'),
    'IVB': ('British Virgin Islands', 'ğŸ‡»ğŸ‡¬'),
    'JAM': ('Jamaica', 'ğŸ‡¯ğŸ‡²'),
    'JOR': ('Jordan', 'ğŸ‡¯ğŸ‡´'),
    'JPN': ('Japan', 'ğŸ‡¯ğŸ‡µ'),
    'KAZ': ('Kazakhstan', 'ğŸ‡°ğŸ‡¿'),
    'KEN': ('Kenya', 'ğŸ‡°ğŸ‡ª'),
    'KGZ': ('Kyrgyzstan', 'ğŸ‡°ğŸ‡¬'),
    'KIR': ('Kiribati', 'ğŸ‡°ğŸ‡®'),
    'KOR': ('South Korea', 'ğŸ‡°ğŸ‡·'),
    'KOS': ('Kosovo', 'ğŸ‡½ğŸ‡°'),
    'KSA': ('Saudi Arabia', 'ğŸ‡¸ğŸ‡¦'),
    'KUW': ('Kuwait', 'ğŸ‡°ğŸ‡¼'),
    'LAO': ('Laos', 'ğŸ‡±ğŸ‡¦'),
    'LAT': ('Latvia', 'ğŸ‡±ğŸ‡»'),
    'LBA': ('Libya', 'ğŸ‡±ğŸ‡¾'),
    'LBR': ('Liberia', 'ğŸ‡±ğŸ‡·'),
    'LCA': ('Saint Lucia', 'ğŸ‡±ğŸ‡¨'),
    'LES': ('Lesotho', 'ğŸ‡±ğŸ‡¸'),
    'LIE': ('Liechtenstein', 'ğŸ‡±ğŸ‡®'),
    'LTU': ('Lithuania', 'ğŸ‡±ğŸ‡¹'),
    'LUX': ('Luxembourg', 'ğŸ‡±ğŸ‡º'),
    'MAD': ('Madagascar', 'ğŸ‡²ğŸ‡¬'),
    'MAR': ('Morocco', 'ğŸ‡²ğŸ‡¦'),
    'MAS': ('Malaysia', 'ğŸ‡²ğŸ‡¾'),
    'MAW': ('Malawi', 'ğŸ‡²ğŸ‡¼'),
    'MDA': ('Moldova', 'ğŸ‡²ğŸ‡©'),
    'MDV': ('Maldives', 'ğŸ‡²ğŸ‡»'),
    'MEX': ('Mexico', 'ğŸ‡²ğŸ‡½'),
    'MHL': ('Marshall Islands', 'ğŸ‡²ğŸ‡­'),
    'MKD': ('North Macedonia', 'ğŸ‡²ğŸ‡°'),
    'MLI': ('Mali', 'ğŸ‡²ğŸ‡±'),
    'MLT': ('Malta', 'ğŸ‡²ğŸ‡¹'),
    'MNG': ('Mongolia', 'ğŸ‡²ğŸ‡³'),
    'MNE': ('Montenegro', 'ğŸ‡²ğŸ‡ª'),
    'MON': ('Monaco', 'ğŸ‡²ğŸ‡¨'),
    'MOZ': ('Mozambique', 'ğŸ‡²ğŸ‡¿'),
    'MRI': ('Mauritius', 'ğŸ‡²ğŸ‡º'),
    'MTN': ('Mauritania', 'ğŸ‡²ğŸ‡·'),
    'MYA': ('Myanmar', 'ğŸ‡²ğŸ‡²'),
    'NAM': ('Namibia', 'ğŸ‡³ğŸ‡¦'),
    'NCA': ('Nicaragua', 'ğŸ‡³ğŸ‡®'),
    'NED': ('Netherlands', 'ğŸ‡³ğŸ‡±'),
    'NEP': ('Nepal', 'ğŸ‡³ğŸ‡µ'),
    'NGR': ('Nigeria', 'ğŸ‡³ğŸ‡¬'),
    'NIG': ('Niger', 'ğŸ‡³ğŸ‡ª'),
    'NOR': ('Norway', 'ğŸ‡³ğŸ‡´'),
    'NRU': ('Nauru', 'ğŸ‡³ğŸ‡·'),
    'NZL': ('New Zealand', 'ğŸ‡³ğŸ‡¿'),
    'OMA': ('Oman', 'ğŸ‡´ğŸ‡²'),
    'PAK': ('Pakistan', 'ğŸ‡µğŸ‡°'),
    'PAN': ('Panama', 'ğŸ‡µğŸ‡¦'),
    'PAR': ('Paraguay', 'ğŸ‡µğŸ‡¾'),
    'PER': ('Peru', 'ğŸ‡µğŸ‡ª'),
    'PHI': ('Philippines', 'ğŸ‡µğŸ‡­'),
    'PLE': ('Palestine', 'ğŸ‡µğŸ‡¸'),
    'PLW': ('Palau', 'ğŸ‡µğŸ‡¼'),
    'PNG': ('Papua New Guinea', 'ğŸ‡µğŸ‡¬'),
    'POL': ('Poland', 'ğŸ‡µğŸ‡±'),
    'POR': ('Portugal', 'ğŸ‡µğŸ‡¹'),
    'PRK': ('North Korea', 'ğŸ‡°ğŸ‡µ'),
    'PUR': ('Puerto Rico', 'ğŸ‡µğŸ‡·'),
    'QAT': ('Qatar', 'ğŸ‡¶ğŸ‡¦'),
    'ROU': ('Romania', 'ğŸ‡·ğŸ‡´'),
    'RSA': ('South Africa', 'ğŸ‡¿ğŸ‡¦'),
    'RUS': ('Russia', 'ğŸ‡·ğŸ‡º'),
    'RWA': ('Rwanda', 'ğŸ‡·ğŸ‡¼'),
    'SAM': ('Samoa', 'ğŸ‡¼ğŸ‡¸'),
    'SEN': ('Senegal', 'ğŸ‡¸ğŸ‡³'),
    'SEY': ('Seychelles', 'ğŸ‡¸ğŸ‡¨'),
    'SGP': ('Singapore', 'ğŸ‡¸ğŸ‡¬'),
    'SKN': ('Saint Kitts and Nevis', 'ğŸ‡°ğŸ‡³'),
    'SLE': ('Sierra Leone', 'ğŸ‡¸ğŸ‡±'),
    'SLO': ('Slovenia', 'ğŸ‡¸ğŸ‡®'),
    'SMR': ('San Marino', 'ğŸ‡¸ğŸ‡²'),
    'SOL': ('Solomon Islands', 'ğŸ‡¸ğŸ‡§'),
    'SOM': ('Somalia', 'ğŸ‡¸ğŸ‡´'),
    'SRB': ('Serbia', 'ğŸ‡·ğŸ‡¸'),
    'SRI': ('Sri Lanka', 'ğŸ‡±ğŸ‡°'),
    'SSD': ('South Sudan', 'ğŸ‡¸ğŸ‡¸'),
    'STP': ('SÃ£o TomÃ© and PrÃ­ncipe', 'ğŸ‡¸ğŸ‡¹'),
    'SUD': ('Sudan', 'ğŸ‡¸ğŸ‡©'),
    'SUI': ('Switzerland', 'ğŸ‡¨ğŸ‡­'),
    'SUR': ('Suriname', 'ğŸ‡¸ğŸ‡·'),
    'SVK': ('Slovakia', 'ğŸ‡¸ğŸ‡°'),
    'SWE': ('Sweden', 'ğŸ‡¸ğŸ‡ª'),
    'SWZ': ('Eswatini', 'ğŸ‡¸ğŸ‡¿'),
    'SYR': ('Syria', 'ğŸ‡¸ğŸ‡¾'),
    'TAN': ('Tanzania', 'ğŸ‡¹ğŸ‡¿'),
    'TGA': ('Tonga', 'ğŸ‡¹ğŸ‡´'),
    'THA': ('Thailand', 'ğŸ‡¹ğŸ‡­'),
    'TJK': ('Tajikistan', 'ğŸ‡¹ğŸ‡¯'),
    'TKM': ('Turkmenistan', 'ğŸ‡¹ğŸ‡²'),
    'TLS': ('Timor-Leste', 'ğŸ‡¹ğŸ‡±'),
    'TOG': ('Togo', 'ğŸ‡¹ğŸ‡¬'),
    'TPE': ('Chinese Taipei', 'ğŸ‡¹ğŸ‡¼'),
    'TTO': ('Trinidad and Tobago', 'ğŸ‡¹ğŸ‡¹'),
    'TUN': ('Tunisia', 'ğŸ‡¹ğŸ‡³'),
    'TUR': ('Turkey', 'ğŸ‡¹ğŸ‡·'),
    'TUV': ('Tuvalu', 'ğŸ‡¹ğŸ‡»'),
    'UAE': ('United Arab Emirates', 'ğŸ‡¦ğŸ‡ª'),
    'UGA': ('Uganda', 'ğŸ‡ºğŸ‡¬'),
    'UKR': ('Ukraine', 'ğŸ‡ºğŸ‡¦'),
    'URU': ('Uruguay', 'ğŸ‡ºğŸ‡¾'),
    'USA': ('United States', 'ğŸ‡ºğŸ‡¸'),
    'UZB': ('Uzbekistan', 'ğŸ‡ºğŸ‡¿'),
    'VAN': ('Vanuatu', 'ğŸ‡»ğŸ‡º'),
    'VEN': ('Venezuela', 'ğŸ‡»ğŸ‡ª'),
    'VIE': ('Vietnam', 'ğŸ‡»ğŸ‡³'),
    'VIN': ('Saint Vincent and the Grenadines', 'ğŸ‡»ğŸ‡¨'),
    'YEM': ('Yemen', 'ğŸ‡¾ğŸ‡ª'),
    'ZAM': ('Zambia', 'ğŸ‡¿ğŸ‡²'),
    'ZIM': ('Zimbabwe', 'ğŸ‡¿ğŸ‡¼')
}

# Function to get country display name for dropdown
def get_country_display(noc):
    if noc in COUNTRY_MAPPING:
        name, flag = COUNTRY_MAPPING[noc]
        return f"{name} - {noc} {flag}"
    return noc

# Create custom dropdown options with country name, NOC, and flag
custom_options = [
    {'label': get_country_display(opt['value']), 'value': opt['value']}
    for opt in NOC_OPTIONS_NO_ALL
]

# Use helper to get default value safely
default_noc = get_default_value(NOC_OPTIONS_NO_ALL)

layout = dbc.Container([
    html.H3("Country Performance Profile"),
    html.Hr(),
    dbc.Row([
        dbc.Col([
            html.Label("Select Country:", className="fw-bold"),
            dcc.Dropdown(
                id='country-profile-noc-dropdown',
                options=custom_options,
                value=default_noc,
                clearable=False,
            )
        ], width=12, md=6, lg=4)
    ]),
    html.Hr(),

    # Visualization Area with Spinner
    dbc.Spinner(
        html.Div(id='country-profile-visuals') # Content will be loaded here by callback
    ),
    
    # Hidden store to receive country from globe
    dcc.Store(id='clicked-country', data=None, storage_type='session')
])

# Callback to update dropdown when country is selected from globe
@callback(
    Output('country-profile-noc-dropdown', 'value'),
    Input('clicked-country', 'data'),
    prevent_initial_call=True
)
def update_dropdown_from_globe(country):
    if country is None or country not in [opt['value'] for opt in NOC_OPTIONS_NO_ALL]:
        print(f"Invalid country code: {country}")  # Debug print
        raise PreventUpdate
    print(f"Updating dropdown to: {country}")  # Debug print
    return country

# Combined Callback for ALL country profile outputs
@callback(
    Output('country-profile-visuals', 'children'), # Output to the Div container
    Input('country-profile-noc-dropdown', 'value')
)
def update_country_visuals(selected_noc):
    if not selected_noc or df.empty:
        return html.P("Please select a country from the dropdown or wait for data to load.")

    # Filter data for the selected country
    country_df = df[df['NOC'] == selected_noc].copy()
    if country_df.empty:
        return html.P(f"No data found for {selected_noc}.")

    # --- Calculations ---
    # 1. Medals over Time
    medals_df = country_df[country_df['Medal'] != 'None']
    medals_time = medals_df.groupby(['Year', 'Medal']).size().unstack(fill_value=0).reset_index()

    # 2. Gender over Time
    gender_time = country_df.drop_duplicates(subset=['Year', 'Name', 'Gender'])\
                          .groupby(['Year', 'Gender']).size().unstack(fill_value=0).reset_index()

    # 3. Top Sports
    top_sports = medals_df['Sport'].value_counts().reset_index(name='Medal Count').head(10)

    # 4. Age Distribution
    age_data = country_df['Age'].dropna()

    # --- Generate Figures ---
    # Figure 1: Medals
    if not medals_time.empty:
        medal_columns = ['Gold', 'Silver', 'Bronze']
        for medal in medal_columns:
             if medal not in medals_time.columns: medals_time[medal] = 0 # Ensure columns exist
        medals_fig = px.bar(medals_time, x='Year', y=medal_columns,
                          title=f"Medals Won by {selected_noc} Over Time",
                          labels={'value': 'Medals', 'variable': 'Medal'},
                          color_discrete_map={'Gold': 'gold', 'Silver': 'silver', 'Bronze': '#cd7f32'})
        medals_fig.update_layout(xaxis_title='Year', yaxis_title='Number of Medals', legend_title_text='Medal', barmode='stack')
    else:
        medals_fig = go.Figure().update_layout(title=f"No Medal Data for {selected_noc}")

    # Figure 2: Gender
    if not gender_time.empty:
        gender_columns = ['M', 'F']
        for gender in gender_columns:
            if gender not in gender_time.columns: gender_time[gender] = 0 # Ensure M/F exist
        gender_fig = px.line(gender_time, x='Year', y=gender_columns,
                           title=f"Athlete Participation by Gender ({selected_noc})",
                           labels={'value': 'Athletes', 'variable': 'Gender'},
                           color_discrete_map={'M': 'royalblue', 'F': 'lightcoral'}, markers=True)
        gender_fig.update_layout(xaxis_title='Year', yaxis_title='Number of Unique Athletes', legend_title_text='Gender')
    else:
        gender_fig = go.Figure().update_layout(title=f"No Gender Data for {selected_noc}")


    # Figure 3: Top Sports
    if not top_sports.empty:
        sports_fig = px.bar(top_sports, x='Medal Count', y='Sport', orientation='h',
                           title=f"Top 10 Medal-Winning Sports ({selected_noc})")
        sports_fig.update_layout(xaxis_title='Total Medals Won', yaxis_title='Sport', yaxis={'categoryorder':'total ascending'})
    else:
         sports_fig = go.Figure().update_layout(title=f"No Medal Data (Top Sports) for {selected_noc}")


    # Figure 4: Age Distribution
    if not age_data.empty:
        age_fig = px.histogram(age_data, nbins=20, title=f"Age Distribution of Athletes ({selected_noc})")
        age_fig.update_layout(xaxis_title='Age', yaxis_title='Number of Athletes')
    else:
        age_fig = go.Figure().update_layout(title=f"No Age Data for {selected_noc}")

    # --- Assemble Layout for Output Div ---
    layout_content = dbc.Row([
        dbc.Col(dcc.Graph(figure=medals_fig), width=12, lg=6, className="mb-4"),
        dbc.Col(dcc.Graph(figure=gender_fig), width=12, lg=6, className="mb-4"),
        dbc.Col(dcc.Graph(figure=sports_fig), width=12, lg=6, className="mb-4"),
        dbc.Col(dcc.Graph(figure=age_fig), width=12, lg=6, className="mb-4"),
        # Add more charts or summary cards here in new Cols
    ])

    return layout_content